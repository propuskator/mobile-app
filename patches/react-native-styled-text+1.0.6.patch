diff --git a/node_modules/react-native-styled-text/StyledText/index.js b/node_modules/react-native-styled-text/StyledText/index.js
index 4a8cedc..9c3550f 100644
--- a/node_modules/react-native-styled-text/StyledText/index.js
+++ b/node_modules/react-native-styled-text/StyledText/index.js
@@ -6,12 +6,13 @@ import { renderStyledText } from './renderer';
 type Props = TextProps & {
   children: String,
   textStyles: StyleSheet.StyleSheet,
+  textEvents: Object
 }
 
 class StyledText extends React.PureComponent<Props> {
   render() {
-    const { children, textStyles, ...textProps } = this.props;
-    return renderStyledText(children, textStyles, textProps);
+    const { children, textStyles, textEvents, ...textProps } = this.props;
+    return renderStyledText(children, textStyles, textProps, textEvents);
   }
 }
 
diff --git a/node_modules/react-native-styled-text/StyledText/renderer.js b/node_modules/react-native-styled-text/StyledText/renderer.js
index 46b85a0..93eeaa2 100644
--- a/node_modules/react-native-styled-text/StyledText/renderer.js
+++ b/node_modules/react-native-styled-text/StyledText/renderer.js
@@ -1,5 +1,5 @@
 import * as React from 'react';
-import { Text, StyleSheet } from 'react-native';
+import { Text, StyleSheet, TouchableOpacity, Pressable, Platform } from 'react-native';
 
 import { parse, Mixed } from './parser';
 import { verifyChildrenProp, verifyTextStylesProp, verifyTextStyles } from './utils';
@@ -13,30 +13,51 @@ const defaultStyles = {
   },
   u: {
     textDecorationLine: 'underline',
+  },
+  a: {
+    textDecorationLine: 'underline',
+    color: '#3D80FF'
   }
 };
 
-const renderMixedText = (mixedText: Mixed, textStyles: Object) => mixedText.map((element, index) => (
-  typeof element === 'string' || element === undefined || element === null
-    ? element
-    : React.createElement(
-      Text,
-      { 
-        style: textStyles[element.styleName] || defaultStyles[element.styleName], 
-        key: index 
-      },
-      renderMixedText(element.mixedText, textStyles),
-    )
-));
+const renderMixedText = (mixedText: Mixed, textStyles: Object, textEvents: Object) => mixedText.map((element, index) => {
+    return typeof element === 'string' || element === undefined || element === null
+      ? element
+      : element.styleName === 'a' ?
+      (
+        <Pressable
+          onPress={() => textEvents.a.onPress(element.mixedText[0])}
+          style={{
+            ...Platform.select({
+              ios : {
+                marginBottom: 2
+              },
+              android: {
+                height: 15
+              }
+            })
+          }}
+        >
+          <Text style={textStyles[element.styleName] || defaultStyles[element.styleName]}>
+            {renderMixedText(element.mixedText, textStyles)}
+          </Text>
+        </Pressable>
+      ) : (
+        <Text
+          style={textStyles[element.styleName] || defaultStyles[element.styleName]}
+        >{renderMixedText(element.mixedText, textStyles)}</Text>
+      )
+  ;
+})
 
-export const renderStyledText = (children, textStyles, textProps) => {
+export const renderStyledText = (children, textStyles, textProps, textEvents) => {
   const text = verifyChildrenProp(children) ? children : undefined;
   const styles = verifyTextStylesProp(textStyles) ? (textStyles || {}) : {}
 
   const mixedText = parse(text);
   verifyTextStyles(mixedText, styles, defaultStyles);
 
-  const textElements = renderMixedText(mixedText, styles);
+  const textElements = renderMixedText(mixedText, styles, textEvents);
 
   return React.createElement(
     Text,
diff --git a/node_modules/react-native-styled-text/index.d.ts b/node_modules/react-native-styled-text/index.d.ts
index d6c5c62..8de37f3 100644
--- a/node_modules/react-native-styled-text/index.d.ts
+++ b/node_modules/react-native-styled-text/index.d.ts
@@ -13,6 +13,7 @@ export interface Props extends TextProps {
      * Custom styles which may be used as style tags in the text property
      */
 	textStyles?: object;
+	textEvents?: object;
 }
 
 /**
